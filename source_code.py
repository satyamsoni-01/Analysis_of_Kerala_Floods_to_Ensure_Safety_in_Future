# -*- coding: utf-8 -*-
"""WRE_PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jm1KKzvNo0oOonA-4ZjrACAFPHxYDzc8
"""

import math
from math import sin
from math import cos
from math import pow
import numpy as np
import pandas as pd
from google.colab import drive
import calendar
# calendar.month_abbr
import seaborn as sns

import matplotlib.pyplot as plt
from sklearn.model_selection import  train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV,RandomizedSearchCV
from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error,explained_variance_score

data=pd.read_csv('/content/rain_fall_dataset - Sheet1 (2).csv')

data.head()

data.tail()

data_matrix=data.values
data_matrix[0]

print(data.shape)
print(data_matrix.shape)
len(data_matrix[0])

data.describe()

month_max=[0]*12
month_max_corres_year=[0]*12
for i in range(12):
  max=0
  y=0
  for j in range (118):
    if(data_matrix[j][i+2]>max):
      max=data_matrix[j][i+2]
      y=data_matrix[j][1]
  month_max[i]=max
  month_max_corres_year[i]=y

print(month_max)
print(month_max_corres_year)

fig, ax = plt.subplots(figsize=(10,10))

# plt.plot(month_max,month_max_corres_year)


ax.scatter(month_max_corres_year, month_max, c='m')

# Set label for every score inside scatter plot
for i, n in enumerate(month_max):
    if(month_max_corres_year[i]>0):
         ax.annotate([n,calendar.month_abbr[i+1],month_max_corres_year[i]], (month_max_corres_year[i],n))


plt.show()

year=[]
for i in range(len(data_matrix)):
    year.append(data_matrix[i][1])

year

yearly_precipitation=[]
for i in range(len(data_matrix)):
    yearly_precipitation.append(data_matrix[i][14])
yearly_precipitation

len(year)

plt.plot(year,yearly_precipitation)

def estimate_coef(x, y):
    n = np.size(x)
    m_x = np.mean(x)
    m_y = np.mean(y)
    SS_xy = np.sum(y*x) - n*m_y*m_x
    SS_xx = np.sum(x*x) - n*m_x*m_x

    b_1 = SS_xy / SS_xx
    b_0 = m_y - b_1*m_x

    return (b_0, b_1)

def plot_regression_line(x, y, b):

    plt.scatter(x, y, color = "m",
               marker = "o", s = 30)


    y_pred = b[0] + b[1]*x


    plt.plot(x, y_pred, color = "g")


    plt.xlabel('Year')
    plt.ylabel('yearly_precipitation')
    plt.plot(year,yearly_precipitation)

    plt.show()

b = estimate_coef(np.array(year),np.array(yearly_precipitation))
print("Estimated coefficients:\nb_0 = {}  \
          \nb_1 = {}".format(b[0], b[1]))


plot_regression_line(np.array(year), np.array(yearly_precipitation), b)

y=(-1)*b[0]/b[1]
print("Year in Which almost nil precipitation=",round(y,0))

Peak_precipitation=[2900]*len(year)

color = ['green' if x>2900 else 'red' for x in yearly_precipitation]


# Create scatter plot
fig, ax = plt.subplots(figsize=(30, 15))

plt.plot(year,Peak_precipitation)


ax.scatter(year, yearly_precipitation, c=color)

# Set label for every score inside scatter plot
for i, n in enumerate(year):
    if(yearly_precipitation[i]>2900):
         ax.annotate(n, (n,yearly_precipitation[i]))


plt.show()

box_data =data.drop(['SUBDIVISION','YEAR','ANNUAL RAINFALL','FLOODS','Floods (Binary)'],axis=1)
plt.figure(figsize=(10,7))
sns.boxplot(box_data)

y=data['Floods (Binary)']
x= box_data
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=.3, random_state=25)

from sklearn import svm

regression = svm.SVR()
param_grid = {'C': [0.1, 1, 10, 100, 1000], 'gamma': [1,0.1,0.01,0.001],'kernel': ['rbf', 'sigmoid','ReLu']}
grid = GridSearchCV(regression, param_grid, cv=5)
grid.fit(x,y)
grid_pred= grid.predict(X_test)

print("Best Hyperparameters:", grid.best_params_)
print("Best CV Score:", -grid.best_score_)
print("R^2_score : ", r2_score(y_test, grid_pred))
print("MAE :", mean_absolute_error(y_test,grid_pred))
print("MSE:",np.sqrt(mean_squared_error(y_test, grid_pred)))
print("explained_variance_score: ",explained_variance_score(y_test, grid_pred))

from sklearn.ensemble import RandomForestRegressor
RF_model = RandomForestRegressor()

RF_model = RandomForestRegressor(n_estimators=100, max_depth=6, max_features='sqrt', max_leaf_nodes=9)
RF_model.fit(X_train, y_train)

# Get feature importances
importances = RF_model.feature_importances_
features = X_train.columns
indices = np.argsort(importances)[::-1]

# Print feature importances
print("Feature importances:")
for f in range(X_train.shape[1]):
    print("%d. %s (%f)" % (f + 1, features[indices[f]], importances[indices[f]]))

fig = plt.figure(figsize = (10, 5))
plt.bar(features,importances,  color ='maroon',
        width = 0.3)

plt.xlabel("Month")
plt.ylabel("Feature Importance")
plt.title("Important month")
plt.show()



len(data_matrix)

month=list(calendar.month_abbr[1:13:1])
month

yearly_precipitation

data_2018=[]
for i  in range(12):
  data_2018.append(data_matrix[117][i+2])

data_2018

# color = ['green' if x>0 else 'red' for x in graph_2018]


# Create scatter plot
fig, ax = plt.subplots(figsize=(5,5))

plt.plot(month,data_2018)

plt.xlabel("Month")
plt.ylabel("RainFall")
plt.title("2018 fload interpretation")
ax.scatter(month, data_2018)

# Set label for every score inside scatter plot
for i in range(len(month)):
         ax.annotate(data_2018[i], (month[i],data_2018[i]))


plt.show()

print("Minimum Precipitation in previour Year",min(yearly_precipitation))

year[yearly_precipitation.index(min(yearly_precipitation))]

data_1976=[]
for i  in range(12):
  data_1976.append(data_matrix[2018-1976][i+2])


data_1976

fig, ax = plt.subplots(figsize=(5,5))

plt.plot(month,data_1976)

plt.xlabel("Month")
plt.ylabel("RainFall")
plt.title("1976 fload interpretation")
ax.scatter(month, data_1976)

# Set label for every score inside scatter plot
for i in range(len(month)):
         ax.annotate(data_1976[i], (month[i],data_1976[i]))


plt.show()

data_matrix.shape

data_matrix

min_precipitation_Flood=4500
for i in range(len(data_matrix)):
  if(data_matrix[i][14]<min_precipitation_Flood and data_matrix[i][16]==1):
    min_precipitation_Flood=data_matrix[i][14]

min_precipitation_Flood

year[yearly_precipitation.index(min_precipitation_Flood)]

data_1958=[]
for i  in range(12):
  data_1958.append(data_matrix[2018-1958][i+2])


data_1958

# fig, ax = plt.subplots(figsize=(8,8))
fig, ax = plt.subplots(figsize=(5,5))


plt.plot(month,data_1976)


plt.plot(month,data_1958)

# Set label for every score inside scatter plot
for i in range(len(month)):
         ax.annotate(data_1976[i], (month[i],data_1976[i]))











plt.xlabel("Month")
plt.ylabel("RainFall")
plt.title("1958 fload interpretation vs 2018 fload Interpretation")

ax.scatter(month, data_1976)
ax.scatter(month, data_1958)

# Set label for every score inside scatter plot
for i in range(len(month)):
         ax.annotate(data_1958[i], (month[i],data_1958[i]))


plt.show()